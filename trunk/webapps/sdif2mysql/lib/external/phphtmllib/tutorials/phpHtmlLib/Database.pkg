

<refentry id="{@id}">
 <refnamediv>
  <refname>Database object</refname>
  <refpurpose>The phpHtmlLib DataBase</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <copyright>&copy; #!#COPYDATE#!#, Walter A. Boring IV, Suren Markosian</copyright>
   <releaseinfo>phpHtmlLib #!#VERSION#!#</releaseinfo>
  </refsynopsisdivinfo>
 </refsynopsisdiv>
 {@toc}
 <refsect1 id="{@id database}">
  <title>Database</title>
  <para>
      The phpHtmlLib Database object uses php5's PDO object internall to do database requests.  The Database object
      creates a common api for doing normal sql queries in an easy to use fashion.  It also has apis for doing
      cached queries.
  </para>
  <para>
      Why not just use PDO?
  </para>
  <para>
      For large scale applications PDO can be combersome to do very simple things.  Sometimes a database maybe set up
      to have a very fast connection timeout to help prevent too many stale connections.  Currently with php 5.2.1, there
      is no way to have a PDO object automatically detect a connection timeout and re-connect.  So to trap
      for this using PDO, you have to wrape EVERY query you do with a check for a very specific failure and then
      create a new PDO object once the failure is detected, then retry the query.  Very much a pain in the ....
  </para>
  <para>
      The phpHtmlLib Database object automatically detects theses errors for you and by default will retry to connect
      to the database twice before giving up.
  </para>
 </refsect1>
 <refsect1 id="{@id connection}">
  <title>Create a Connection</title>
  <para>
      How do you connect to a database?
  </para>
  <para>
      <example>
          <![CDATA[
<?php
  //first create a DSN
  $dsn = DataBase::dsn('mysql', 'mydbname', 'myhostname');

  $db = new DataBase($dsn, 'myusername', 'mypassword');
?>
          ]]>
      </example>
  </para>
  <para>
      By default the DataBase object will set up PDO to use exceptions for errors and force all
      column names to be lower case.   You can of course change that.
  </para>
 </refsect1>
 <refsect1 id="{@id api}">
  <title>PDO API++</title>
  <para>
      The DataBase object provides the same APIs as PDO does for doing querys with some additional APIs
      to make things easier.
      <unorderedlist>
          <listitem><para>disconnect() - disconnect to the db.</para></listitem>
          <listitem><para>reconnect() - force a disconnect and then a new connection</para></listitem>
          <listitem><para>set_cache_obj() - set the Cache object child for cached queries</para></listitem>
          <listitem><para>insert() - insert a row into a table.</para></listitem>
          <listitem><para>update() - update a row in a table.</para></listitem>
          <listitem><para>delete() - delete a row(s) from a table.</para></listitem>
          <listitem><para>queryBind() - simple select query with bind variables</para></listitem>
          <listitem><para>queryBindOneRow() - bind query and return only 1 row.</para></listitem>
          <listitem><para>queryBindOneRowCache() - cached version of queryBindOneRow.</para></listitem>
          <listitem><para>queryBindAllRowsCache() - cached query to return ALL rows..</para></listitem>
          <listitem><para>queryBindOneValue() - bind query and return 1 column.</para></listitem>
          <listitem><para>queryBindOneValueCache() - cached version of queryBindOneValue</para></listitem>
          <listitem><para>queryBindLimit() - bind query and return n rows with x offset</para></listitem>
          <listitem><para></para></listitem>
      </unorderedlist>
  </para>
 </refsect1>
 <refsect1 id="{@id insert}">
  <title>Insert</title>
  <para>
      How do you insert 1 row into a table.
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already
try {
 //insert a new user into the user table
 //insert returns the id of the new record.
 $id = $db->insert('user', array('firstname' => 'Walt',
                                 'lastname' => 'Broing',
                                 'email' => 'waboring@newsblob.com'));
} catch (Exception $e) {
   echo "Something went wrong inserting into the user table '.$e->getMessage();
}
?>
          ]]>
      </example>
  </para>
 </refsect1>
 <refsect1 id="{@id update}">
  <title>Update</title>
  <para>
      How do you update an existing row in a table?
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already

try {
 //lets fix my last name.  we assume the id of the user
 // in the table is 69.
 //update internally uses a bindQuery to do the work.
 //so all variables are passed as bind variables
 //even in the where clause portion.  This should
 //make doing similar updates quicker.
 $db->update('user', array('lastname' => ':last'),
                     'user_id=:id',
                     array(':last' => 'Boring', ':id' => 69));
} catch (Exception $e) {
   echo "Something went wrong updating the user '.$e->getMessage();
}
?>
          ]]>
      </example>
  </para>
 </refsect1>
 <refsect1 id="{@id delete}">
  <title>Delete</title>
  <para>
      How do you delete a row in a table?
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already

try {
 //delete me assuming my user_id is 69
 $db->delete('user', 'user_id=:id',  array(':id' => 69));
} catch (Exception $e) {
   echo "Something went wrong deleting the user '.$e->getMessage();
}
?>
          ]]>
      </example>
  </para>
 </refsect1>
 <refsect1 id="{@id querybind}">
  <title>queryBind</title>
  <para>
      How do I get rows from a table?
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already

try {
 //get a specific user
 $sql = 'select * from user where lastname like :name';
 $bind_vars = array(':name' => 'B%');

 $stmt = $db->queryBind($sql, $bind_vars);
} catch (Exception $e) {
   echo "Failed to get a user. '.$e->getMessage();
   exit;
}

//now do something.
while ($row = $stmt->fetch()) {
   echo $row->firstname.' '.$row->lastname."\n";
}


?>
          ]]>
      </example>
  </para>
 </refsect1>

  <refsect1 id="{@id querybindonerow}">
  <title>queryBindOneRow</title>
  <para>
      How do I get 1 row from a table?
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already

try {
 //get a specific user
 $sql = 'select * from user where user_id=:id';
 $bind_vars = array(':id' => 69);

 $row = $db->queryBindOneRow($sql, $bind_vars);
} catch (Exception $e) {
   echo "Failed to get a user. '.$e->getMessage();
   exit;
}

//now do something.
echo $row->firstname.' '.$row->lastname."\n";
?>
          ]]>
      </example>
  </para>
 </refsect1>

  <refsect1 id="{@id querybindonevalue}">
  <title>queryBindOneValue</title>
  <para>
      How do I get 1 value from a table?
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already

try {
 //get a specific user
 $sql = 'select email from user where user_id=:id';
 $bind_vars = array(':id' => 69);

 $email = $db->queryBindOneValue($sql, $bind_vars);
} catch (Exception $e) {
   echo "Failed to get a user email address. '.$e->getMessage();
   exit;
}

//now do something.
echo $email"\n";
?>
          ]]>
      </example>
  </para>
 </refsect1>

  <refsect1 id="{@id querybindonerowcache}">
  <title>queryBindOneRowCache</title>
  <para>
      How do I get 1 row from a table using a cached query?
      This uses the FileCache object, which will store the cache values
      hashing to 1 file on disk in the /tmp/phphtmllib-cache directory.

      The cache key will be constructed from the query parameters passed in.
      <example>
          <![CDATA[
<?php
//assume we have a DataBase object already
//make sure the cache object is set
$db->set_cache_obj(FileCache::singleton());

try {
 //get a specific user
 $sql = 'select * from user where user_id=:id';
 $bind_vars = array(':id' => 69);
 //how long do you want the cache to be valid
 //in seconds.
 $timeout = 120;

 $row = $db->queryBindOneRowCache($sql, $bind_vars, $timeout);
} catch (Exception $e) {
   echo "Failed to get a user. '.$e->getMessage();
   exit;
}

//now do something.
echo $row->firstname.' '.$row->lastname."\n";
?>
          ]]>
      </example>
  </para>
 </refsect1>


 <refsect1 id="{@id license}">
  <title>Software license</title>
   <para>phpHtmlLib is released under
    {@link http://www.gnu.org/copyleft/lesser.html GNU LGPL}</para>
 </refsect1>
</refentry>
