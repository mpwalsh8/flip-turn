<?xml version="1.0"?>
<!--
 Requirements:

 - PHP 5.1.4
 - Phing 2.2.0
 - PHPDocumentor 1.3.1
 - VersionControl_SVN 0.3

 Requirements for running tests (not yet implemented):
 - PHPUnit 3.0.0
 - Xdebug 2.0

 Usage:

   phing [ <options> ] [ <targets> ]

 Options:

   -Dtree={core|incubator}
     Render documentation for core or incubator only.

   -Dlang={en|ar|de|es|fr|ja|nl|pl|pt-br|ru|zh}
     Render core manual for specified language only.

 Targets:


-->
<project name="phphtmllib" default="dist" basedir=".">

  <property name="phl.src.default" value="${project.basedir}/.." />
  <property name="phl.product.name" value="phpHtmlLib" />
  <property name="phl.productname" value="phphtmllib" />
  <property name="phl.version" value="" />
  <property name="svn.url" value="https://phphtmllib.svn.sourceforge.net/svnroot" />
  <property name="phl.svn.url" value="${svn.url}/phphtmllib/trunk/phphtmllib" />
  <property name="phl.svn.tag" value="HEAD" />
  <property name="phl.svn.username" value="" />
  <property name="phl.svn.password" value="" />
  <property name="phl.export.dir" value="./${phl.productname}-export-${phl.svn.tag}" />
  <property name="phl.checkout.dir" value=".." />
  <property name="stage.home" value="${project.basedir}/stage" />

  <!--
  <property name="phl.stage.dir" value="${stage.home}/${phl.productname}-${phl.version}" />
  <property name="phl.docs.dir" value="${stage.home}/${phl.productname}-Documentation-${phl.version}" />
  <property name="phl.tarball" value="${stage.home}/${phl.productname}-${phl.version}.tar" />
  //-->

  <property name="lang" value="en" />
  <property name="tree" value="core" />

  <target name="dist" depends="build"
    description="Stage product, build docs, create tarball and zip archives.  This is the default target.">
    <echo message="Creating tar archives..." />
    <tar destfile="${phl.tarball}.gz" basedir="${stage.home}" compression="gzip" />
  </target>

  <target name="build" depends="version,stage,prepare,docs"
    description="Stage product and build docs.">
  </target>

  <target name="version" description="Make sure the version is set.">

      <if>
          <equals arg1="${phl.version}" arg2="" />
          <then>
              <input propertyname="phl.version" promptChar="?">Enter Verison</input>
              <echo msg="Got version ${phl.version}" />
          </then>
      </if>

      <property name="phl.stage.dir" value="${stage.home}/${phl.productname}-${phl.version}" />
      <property name="phl.docs.dir" value="${stage.home}/${phl.productname}-Documentation-${phl.version}" />
      <property name="phl.tarball" value="${stage.home}/${phl.productname}-${phl.version}.tar" />
  </target>

  <target name="stage" depends="preparedir,source.export"
    description="Prepare the source for the build.">
    <echo msg="Staging files from ${phl.src} to ${phl.stage.dir}" />
    <copy todir="${phl.stage.dir}">
      <fileset dir="${phl.src}">
        <exclude name="**/.svn/**" />
        <exclude name="doc/**" />
      </fileset>
    </copy>
  </target>

  <target name="preparedir" depends="source.check">
    <mkdir dir="${phl.stage.dir}" />
    <mkdir dir="${phl.stage.dir}/doc" />
  </target>

  <target name="prepare.docs" depends="source.check">
    <mkdir dir="${phl.docs.dir}" />
  </target>

  <target name="source.check">
    <svnlastrevision svnpath="svn"
      repositoryurl="${phl.svn.url}"
      workingcopy="${project.basedir}"
      propertyname="phl.svn.revision"
      username=""
      />
  </target>

  <!--<target name="svn.creds"
      description="get the subversion credentials">
      <input propertyname="phl.svn.username" defaultValue="hemna" promptChar="?">svn username</input>
      <input propertyname="phl.svn.password" promptChar="?">svn password</input>
  </target>//-->

  <target name="source.export" unless="phl.src">
    <svnexport svnpath="svn"
      repositoryurl="${phl.svn.url}"
      todir="${phl.export.dir}"
      />
    <property name="phl.src" value="${phl.export.dir}" />
  </target>


   <target name="copyrightdate"
      description="gets the current date in the format that the tutorials need">

      <tstamp>
          <format property="phl.copydate" pattern="%B %Y"/>
      </tstamp>

  </target>

  <target name="prepare" depends="source.export,copyrightdate"
      description="Walk all of the files and modify them for version and date info">

      <reflexive>
          <fileset dir="${phl.stage.dir}/tutorials/phpHtmlLib">
              <!--<include pattern="*.pkg" />
              <include pattern="*.cls" /> //-->
         </fileset>
         <filterchain>
             <replacetokens begintoken="#!#" endtoken="#!#">
                 <token key="VERSION" value="${phl.version}" />
                 <token key="COPYDATE" value="${phl.copydate}" />
             </replacetokens>
          </filterchain>
      </reflexive>

      <reflexive>
          <fileset dir="${phl.stage.dir}">
              <include name="phphtmllib.inc" />
         </fileset>
         <filterchain>
             <replacetokens begintoken="#!#" endtoken="#!#">
                 <token key="VERSION" value="${phl.version}" />
                 <token key="COPYDATE" value="${phl.copydate}" />
             </replacetokens>
          </filterchain>
      </reflexive>

  </target>

  <target name="docs" depends="prepare"
    description="Build doxygen API documentation">

  <echo msg="Building phpDocumentor documentation"/>

  <phpdoc title="phpHtmlLib Documentation"
      destdir="${phl.stage.dir}/doc"
      output="HTML:frames:DOM/phphtmllib"
      sourcecode="true"
      quiet="true"
      defaultpackagename="phpHtmlLib"
      defaultcategoryname="phpHtmlLib"
      examplesdir="${phl.export.dir}/examples">
      <fileset dir="${phl.stage.dir}" >
          <exclude name="**/.svn/**" />
          <include name="phphtmllib.inc" />
          <include name="required_includes.inc" />
          <include name="tutorials/*/*" />

          <include name="src/business/*.inc" />
          <include name="src/cache/*.inc" />
          <include name="src/config/*.inc" />
          <include name="src/core/*.inc" />
          <include name="src/data/*.inc" />

          <include name="src/datalist/*.inc" />
          <include name="src/datalist/datalistsource/*.inc" />
          <include name="src/datalist/search/*.inc" />

          <include name="src/db/*.inc" />

          <include name="src/form/*.inc" />
          <include name="src/form/form_elements/*.inc" />
          <include name="src/form/form_elements/buttons/*.inc" />

          <include name="src/generator/*.inc" />
          <include name="src/menu/*.inc" />
          <include name="src/menu/data/*.inc" />
          <include name="src/menu/interface/*.inc" />
          <include name="src/menu/widget/*.inc" />
          <include name="src/misc/*.inc" />
          <include name="src/misc/tag_utils/*.inc" />
          <include name="src/mvc/*.inc" />
          <include name="src/page/*.inc" />
          <include name="src/request/*.inc" />
          <include name="src/session/*.inc" />
          <include name="src/soap/*.inc" />
          <include name="src/svg/*.inc" />
          <include name="src/svg/widgets/*.inc" />
          <include name="src/validation/*.inc" />
          <include name="src/widgets/*.inc" />
          <include name="src/widgets/css/*.inc" />
          <include name="src/wml/*.inc" />
          <include name="src/xml/*.inc" />

      </fileset>
      <projdocfileset dir="." >
          <include name="README" />
          <include name="INSTALL" />
          <include name="CHANGELOG" />
      </projdocfileset>
</phpdoc>
  </target>

  <target name="clean.all" depends="clean"
    description="Remove staged directory, tarball, and svn export.">
    <echo msg="Cleaning up archives..."/>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${stage.home}" />
    </delete>
    <echo msg="Cleaning up svn export..."/>
    <exec command="rm -rf ${phl.export.dir}" />
  </target>

  <target name="clean" depends="clean.docs"
    description="Remove staged directory.  Leave tarball and zip archives.">
    <echo msg="Cleaning up staged files..."/>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${phl.stage.dir}" />
    </delete>
  </target>

  <target name="clean.docs" depends="prepare"
    description="Remove only rendered documentation files.">
    <echo msg="Cleaning up docs..."/>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${phl.docs.dir}" />
    </delete>
  </target>

</project>
